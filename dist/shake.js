const wait = require('./wait');

/**
 * shakes an object or list of objects
 */
module.exports = class shake extends wait {
    /**
     * @param {object|array} object or list of objects to shake
     * @param {number} amount to shake
     * @param {number} duration (in milliseconds) to shake
     * @param {object} options (see Animate.wait)
     */
    constructor(object, amount, duration, options) {
        options = options || {};
        super(object, options);
        this.type = 'Shake';
        if (Array.isArray(object)) {
            this.array = true;
            this.list = object;
        }
        if (options.load) {
            this.load(options.load);
        } else {
            if (this.list) {
                this.start = [];
                for (let i = 0; i < object.length; i++) {
                    const target = object[i];
                    this.start[i] = { x: target.x, y: target.y };
                }
            } else {
                this.start = { x: object.x, y: object.y };
            }
            this.amount = amount;
            this.duration = duration;
        }
    }

    save() {
        const save = super.save();
        save.start = this.start;
        save.amount = this.amount;
        return save;
    }

    load(load) {
        super.load(load);
        this.start = load.start;
        this.amount = load.amount;
    }

    calculate() /*elapsed*/{
        const object = this.object;
        const start = this.start;
        const amount = this.amount;
        if (this.array) {
            const list = this.list;
            for (let i = 0; i < list.length; i++) {
                const object = list[i];
                const actual = start[i];
                object.x = actual.x + Math.floor(Math.random() * amount * 2) - amount;
                object.y = actual.y + Math.floor(Math.random() * amount * 2) - amount;
            }
        }
        object.x = start.x + Math.floor(Math.random() * amount * 2) - amount;
        object.y = start.y + Math.floor(Math.random() * amount * 2) - amount;
    }

    done() {
        const object = this.object;
        const start = this.start;
        if (this.array) {
            const list = this.list;
            for (let i = 0; i < list.length; i++) {
                const object = list[i];
                const actual = start[i];
                object.x = actual.x;
                object.y = actual.y;
            }
        } else {
            object.x = start.x;
            object.y = start.y;
        }
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zaGFrZS5qcyJdLCJuYW1lcyI6WyJ3YWl0IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzaGFrZSIsImNvbnN0cnVjdG9yIiwib2JqZWN0IiwiYW1vdW50IiwiZHVyYXRpb24iLCJvcHRpb25zIiwidHlwZSIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5IiwibGlzdCIsImxvYWQiLCJzdGFydCIsImkiLCJsZW5ndGgiLCJ0YXJnZXQiLCJ4IiwieSIsInNhdmUiLCJjYWxjdWxhdGUiLCJhY3R1YWwiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJkb25lIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPQyxRQUFRLFFBQVIsQ0FBYjs7QUFFQTs7O0FBR0FDLE9BQU9DLE9BQVAsR0FBaUIsTUFBTUMsS0FBTixTQUFvQkosSUFBcEIsQ0FDakI7QUFDSTs7Ozs7O0FBTUFLLGdCQUFZQyxNQUFaLEVBQW9CQyxNQUFwQixFQUE0QkMsUUFBNUIsRUFBc0NDLE9BQXRDLEVBQ0E7QUFDSUEsa0JBQVVBLFdBQVcsRUFBckI7QUFDQSxjQUFNSCxNQUFOLEVBQWNHLE9BQWQ7QUFDQSxhQUFLQyxJQUFMLEdBQVksT0FBWjtBQUNBLFlBQUlDLE1BQU1DLE9BQU4sQ0FBY04sTUFBZCxDQUFKLEVBQ0E7QUFDSSxpQkFBS08sS0FBTCxHQUFhLElBQWI7QUFDQSxpQkFBS0MsSUFBTCxHQUFZUixNQUFaO0FBQ0g7QUFDRCxZQUFJRyxRQUFRTSxJQUFaLEVBQ0E7QUFDSSxpQkFBS0EsSUFBTCxDQUFVTixRQUFRTSxJQUFsQjtBQUNILFNBSEQsTUFLQTtBQUNJLGdCQUFJLEtBQUtELElBQVQsRUFDQTtBQUNJLHFCQUFLRSxLQUFMLEdBQWEsRUFBYjtBQUNBLHFCQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSVgsT0FBT1ksTUFBM0IsRUFBbUNELEdBQW5DLEVBQ0E7QUFDSSwwQkFBTUUsU0FBU2IsT0FBT1csQ0FBUCxDQUFmO0FBQ0EseUJBQUtELEtBQUwsQ0FBV0MsQ0FBWCxJQUFnQixFQUFDRyxHQUFHRCxPQUFPQyxDQUFYLEVBQWNDLEdBQUdGLE9BQU9FLENBQXhCLEVBQWhCO0FBQ0g7QUFDSixhQVJELE1BVUE7QUFDSSxxQkFBS0wsS0FBTCxHQUFhLEVBQUNJLEdBQUdkLE9BQU9jLENBQVgsRUFBY0MsR0FBR2YsT0FBT2UsQ0FBeEIsRUFBYjtBQUNIO0FBQ0QsaUJBQUtkLE1BQUwsR0FBY0EsTUFBZDtBQUNBLGlCQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNIO0FBQ0o7O0FBRURjLFdBQ0E7QUFDSSxjQUFNQSxPQUFPLE1BQU1BLElBQU4sRUFBYjtBQUNBQSxhQUFLTixLQUFMLEdBQWEsS0FBS0EsS0FBbEI7QUFDQU0sYUFBS2YsTUFBTCxHQUFjLEtBQUtBLE1BQW5CO0FBQ0EsZUFBT2UsSUFBUDtBQUNIOztBQUVEUCxTQUFLQSxJQUFMLEVBQ0E7QUFDSSxjQUFNQSxJQUFOLENBQVdBLElBQVg7QUFDQSxhQUFLQyxLQUFMLEdBQWFELEtBQUtDLEtBQWxCO0FBQ0EsYUFBS1QsTUFBTCxHQUFjUSxLQUFLUixNQUFuQjtBQUNIOztBQUVEZ0IsZ0JBQVUsV0FDVjtBQUNJLGNBQU1qQixTQUFTLEtBQUtBLE1BQXBCO0FBQ0EsY0FBTVUsUUFBUSxLQUFLQSxLQUFuQjtBQUNBLGNBQU1ULFNBQVMsS0FBS0EsTUFBcEI7QUFDQSxZQUFJLEtBQUtNLEtBQVQsRUFDQTtBQUNJLGtCQUFNQyxPQUFPLEtBQUtBLElBQWxCO0FBQ0EsaUJBQUssSUFBSUcsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSCxLQUFLSSxNQUF6QixFQUFpQ0QsR0FBakMsRUFDQTtBQUNJLHNCQUFNWCxTQUFTUSxLQUFLRyxDQUFMLENBQWY7QUFDQSxzQkFBTU8sU0FBU1IsTUFBTUMsQ0FBTixDQUFmO0FBQ0FYLHVCQUFPYyxDQUFQLEdBQVdJLE9BQU9KLENBQVAsR0FBV0ssS0FBS0MsS0FBTCxDQUFXRCxLQUFLRSxNQUFMLEtBQWdCcEIsTUFBaEIsR0FBeUIsQ0FBcEMsQ0FBWCxHQUFvREEsTUFBL0Q7QUFDQUQsdUJBQU9lLENBQVAsR0FBV0csT0FBT0gsQ0FBUCxHQUFXSSxLQUFLQyxLQUFMLENBQVdELEtBQUtFLE1BQUwsS0FBZ0JwQixNQUFoQixHQUF5QixDQUFwQyxDQUFYLEdBQW9EQSxNQUEvRDtBQUNIO0FBQ0o7QUFDREQsZUFBT2MsQ0FBUCxHQUFXSixNQUFNSSxDQUFOLEdBQVVLLEtBQUtDLEtBQUwsQ0FBV0QsS0FBS0UsTUFBTCxLQUFnQnBCLE1BQWhCLEdBQXlCLENBQXBDLENBQVYsR0FBbURBLE1BQTlEO0FBQ0FELGVBQU9lLENBQVAsR0FBV0wsTUFBTUssQ0FBTixHQUFVSSxLQUFLQyxLQUFMLENBQVdELEtBQUtFLE1BQUwsS0FBZ0JwQixNQUFoQixHQUF5QixDQUFwQyxDQUFWLEdBQW1EQSxNQUE5RDtBQUNIOztBQUVEcUIsV0FDQTtBQUNJLGNBQU10QixTQUFTLEtBQUtBLE1BQXBCO0FBQ0EsY0FBTVUsUUFBUSxLQUFLQSxLQUFuQjtBQUNBLFlBQUksS0FBS0gsS0FBVCxFQUNBO0FBQ0ksa0JBQU1DLE9BQU8sS0FBS0EsSUFBbEI7QUFDQSxpQkFBSyxJQUFJRyxJQUFJLENBQWIsRUFBZ0JBLElBQUlILEtBQUtJLE1BQXpCLEVBQWlDRCxHQUFqQyxFQUNBO0FBQ0ksc0JBQU1YLFNBQVNRLEtBQUtHLENBQUwsQ0FBZjtBQUNBLHNCQUFNTyxTQUFTUixNQUFNQyxDQUFOLENBQWY7QUFDQVgsdUJBQU9jLENBQVAsR0FBV0ksT0FBT0osQ0FBbEI7QUFDQWQsdUJBQU9lLENBQVAsR0FBV0csT0FBT0gsQ0FBbEI7QUFDSDtBQUNKLFNBVkQsTUFZQTtBQUNJZixtQkFBT2MsQ0FBUCxHQUFXSixNQUFNSSxDQUFqQjtBQUNBZCxtQkFBT2UsQ0FBUCxHQUFXTCxNQUFNSyxDQUFqQjtBQUNIO0FBQ0o7QUFoR0wsQ0FEQSIsImZpbGUiOiJzaGFrZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHdhaXQgPSByZXF1aXJlKCcuL3dhaXQnKVxuXG4vKipcbiAqIHNoYWtlcyBhbiBvYmplY3Qgb3IgbGlzdCBvZiBvYmplY3RzXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3Mgc2hha2UgZXh0ZW5kcyB3YWl0XG57XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R8YXJyYXl9IG9iamVjdCBvciBsaXN0IG9mIG9iamVjdHMgdG8gc2hha2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IHRvIHNoYWtlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIChpbiBtaWxsaXNlY29uZHMpIHRvIHNoYWtlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgKHNlZSBBbmltYXRlLndhaXQpXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob2JqZWN0LCBhbW91bnQsIGR1cmF0aW9uLCBvcHRpb25zKVxuICAgIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICAgICAgc3VwZXIob2JqZWN0LCBvcHRpb25zKVxuICAgICAgICB0aGlzLnR5cGUgPSAnU2hha2UnXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuYXJyYXkgPSB0cnVlXG4gICAgICAgICAgICB0aGlzLmxpc3QgPSBvYmplY3RcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5sb2FkKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmxvYWQob3B0aW9ucy5sb2FkKVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHRoaXMubGlzdClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gW11cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iamVjdC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IG9iamVjdFtpXVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0W2ldID0ge3g6IHRhcmdldC54LCB5OiB0YXJnZXQueX1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHt4OiBvYmplY3QueCwgeTogb2JqZWN0Lnl9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFtb3VudCA9IGFtb3VudFxuICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzYXZlKClcbiAgICB7XG4gICAgICAgIGNvbnN0IHNhdmUgPSBzdXBlci5zYXZlKClcbiAgICAgICAgc2F2ZS5zdGFydCA9IHRoaXMuc3RhcnRcbiAgICAgICAgc2F2ZS5hbW91bnQgPSB0aGlzLmFtb3VudFxuICAgICAgICByZXR1cm4gc2F2ZVxuICAgIH1cblxuICAgIGxvYWQobG9hZClcbiAgICB7XG4gICAgICAgIHN1cGVyLmxvYWQobG9hZClcbiAgICAgICAgdGhpcy5zdGFydCA9IGxvYWQuc3RhcnRcbiAgICAgICAgdGhpcy5hbW91bnQgPSBsb2FkLmFtb3VudFxuICAgIH1cblxuICAgIGNhbGN1bGF0ZSgvKmVsYXBzZWQqLylcbiAgICB7XG4gICAgICAgIGNvbnN0IG9iamVjdCA9IHRoaXMub2JqZWN0XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGFydFxuICAgICAgICBjb25zdCBhbW91bnQgPSB0aGlzLmFtb3VudFxuICAgICAgICBpZiAodGhpcy5hcnJheSlcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgbGlzdCA9IHRoaXMubGlzdFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iamVjdCA9IGxpc3RbaV1cbiAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBzdGFydFtpXVxuICAgICAgICAgICAgICAgIG9iamVjdC54ID0gYWN0dWFsLnggKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhbW91bnQgKiAyKSAtIGFtb3VudFxuICAgICAgICAgICAgICAgIG9iamVjdC55ID0gYWN0dWFsLnkgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhbW91bnQgKiAyKSAtIGFtb3VudFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9iamVjdC54ID0gc3RhcnQueCArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFtb3VudCAqIDIpIC0gYW1vdW50XG4gICAgICAgIG9iamVjdC55ID0gc3RhcnQueSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFtb3VudCAqIDIpIC0gYW1vdW50XG4gICAgfVxuXG4gICAgZG9uZSgpXG4gICAge1xuICAgICAgICBjb25zdCBvYmplY3QgPSB0aGlzLm9iamVjdFxuICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMuc3RhcnRcbiAgICAgICAgaWYgKHRoaXMuYXJyYXkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSB0aGlzLmxpc3RcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmplY3QgPSBsaXN0W2ldXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0dWFsID0gc3RhcnRbaV1cbiAgICAgICAgICAgICAgICBvYmplY3QueCA9IGFjdHVhbC54XG4gICAgICAgICAgICAgICAgb2JqZWN0LnkgPSBhY3R1YWwueVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgb2JqZWN0LnggPSBzdGFydC54XG4gICAgICAgICAgICBvYmplY3QueSA9IHN0YXJ0LnlcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=