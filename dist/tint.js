const Color = require('yy-color');
const wait = require('./wait');

/** changes the tint of an object */
module.exports = class tint extends wait {
    /**
     * @param {PIXI.DisplayObject|PIXI.DisplayObject[]} object
     * @param {number|number[]} tint
     * @param {number} [duration] in milliseconds
     * @param {object} [options] @see {@link Wait}
     */
    constructor(object, tint, duration, options) {
        options = options || {};
        super(object, options);
        this.type = 'Tint';
        if (Array.isArray(object)) {
            this.list = object;
            this.object = this.list[0];
        }
        this.duration = duration;
        if (options.load) {
            this.load(options.load);
        } else if (Array.isArray(tint)) {
            this.tints = [this.object.tint, ...tint];
        } else {
            this.start = this.object.tint;
            this.to = tint;
        }
    }

    save() {
        const save = super.save();
        save.start = this.start;
        save.to = this.to;
        return save;
    }

    load(load) {
        super.load(load);
        this.start = load.start;
        this.to = load.to;
    }

    calculate() {
        const percent = this.options.ease(this.time, 0, 1, this.duration);
        if (this.tints) {
            const each = 1 / (this.tints.length - 1);
            let per = each;
            for (let i = 1; i < this.tints.length; i++) {
                if (percent <= per) {
                    const color = Color.blend(1 - (per - percent) / each, this.tints[i - 1], this.tints[i]);
                    if (this.list) {
                        for (let object of this.list) {
                            object.tint = color;
                        }
                    } else {
                        this.object.tint = color;
                    }
                    break;
                }
                per += each;
            }
        } else {
            const color = Color.blend(percent, this.start, this.to);
            if (this.list) {
                for (let object of this.list) {
                    object.tint = color;
                }
            } else {
                this.object.tint = color;
            }
        }
    }

    reverse() {
        if (this.tints) {
            const tints = [];
            for (let i = this.tints.length - 1; i >= 0; i--) {
                tints.push(this.tints[i]);
            }
            this.tints = tints;
        } else {
            const swap = this.to;
            this.to = this.start;
            this.start = swap;
        }
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90aW50LmpzIl0sIm5hbWVzIjpbIkNvbG9yIiwicmVxdWlyZSIsIndhaXQiLCJtb2R1bGUiLCJleHBvcnRzIiwidGludCIsImNvbnN0cnVjdG9yIiwib2JqZWN0IiwiZHVyYXRpb24iLCJvcHRpb25zIiwidHlwZSIsIkFycmF5IiwiaXNBcnJheSIsImxpc3QiLCJsb2FkIiwidGludHMiLCJzdGFydCIsInRvIiwic2F2ZSIsImNhbGN1bGF0ZSIsInBlcmNlbnQiLCJlYXNlIiwidGltZSIsImVhY2giLCJsZW5ndGgiLCJwZXIiLCJpIiwiY29sb3IiLCJibGVuZCIsInJldmVyc2UiLCJwdXNoIiwic3dhcCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUUMsUUFBUSxVQUFSLENBQWQ7QUFDQSxNQUFNQyxPQUFPRCxRQUFRLFFBQVIsQ0FBYjs7QUFFQTtBQUNBRSxPQUFPQyxPQUFQLEdBQWlCLE1BQU1DLElBQU4sU0FBbUJILElBQW5CLENBQ2pCO0FBQ0k7Ozs7OztBQU1BSSxnQkFBWUMsTUFBWixFQUFvQkYsSUFBcEIsRUFBMEJHLFFBQTFCLEVBQW9DQyxPQUFwQyxFQUNBO0FBQ0lBLGtCQUFVQSxXQUFXLEVBQXJCO0FBQ0EsY0FBTUYsTUFBTixFQUFjRSxPQUFkO0FBQ0EsYUFBS0MsSUFBTCxHQUFZLE1BQVo7QUFDQSxZQUFJQyxNQUFNQyxPQUFOLENBQWNMLE1BQWQsQ0FBSixFQUNBO0FBQ0ksaUJBQUtNLElBQUwsR0FBWU4sTUFBWjtBQUNBLGlCQUFLQSxNQUFMLEdBQWMsS0FBS00sSUFBTCxDQUFVLENBQVYsQ0FBZDtBQUNIO0FBQ0QsYUFBS0wsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxZQUFJQyxRQUFRSyxJQUFaLEVBQ0E7QUFDSSxpQkFBS0EsSUFBTCxDQUFVTCxRQUFRSyxJQUFsQjtBQUNILFNBSEQsTUFJSyxJQUFJSCxNQUFNQyxPQUFOLENBQWNQLElBQWQsQ0FBSixFQUNMO0FBQ0ksaUJBQUtVLEtBQUwsR0FBYSxDQUFDLEtBQUtSLE1BQUwsQ0FBWUYsSUFBYixFQUFtQixHQUFHQSxJQUF0QixDQUFiO0FBQ0gsU0FISSxNQUtMO0FBQ0ksaUJBQUtXLEtBQUwsR0FBYSxLQUFLVCxNQUFMLENBQVlGLElBQXpCO0FBQ0EsaUJBQUtZLEVBQUwsR0FBVVosSUFBVjtBQUNIO0FBQ0o7O0FBRURhLFdBQ0E7QUFDSSxjQUFNQSxPQUFPLE1BQU1BLElBQU4sRUFBYjtBQUNBQSxhQUFLRixLQUFMLEdBQWEsS0FBS0EsS0FBbEI7QUFDQUUsYUFBS0QsRUFBTCxHQUFVLEtBQUtBLEVBQWY7QUFDQSxlQUFPQyxJQUFQO0FBQ0g7O0FBRURKLFNBQUtBLElBQUwsRUFDQTtBQUNJLGNBQU1BLElBQU4sQ0FBV0EsSUFBWDtBQUNBLGFBQUtFLEtBQUwsR0FBYUYsS0FBS0UsS0FBbEI7QUFDQSxhQUFLQyxFQUFMLEdBQVVILEtBQUtHLEVBQWY7QUFDSDs7QUFFREUsZ0JBQ0E7QUFDSSxjQUFNQyxVQUFVLEtBQUtYLE9BQUwsQ0FBYVksSUFBYixDQUFrQixLQUFLQyxJQUF2QixFQUE2QixDQUE3QixFQUFnQyxDQUFoQyxFQUFtQyxLQUFLZCxRQUF4QyxDQUFoQjtBQUNBLFlBQUksS0FBS08sS0FBVCxFQUNBO0FBQ0ksa0JBQU1RLE9BQU8sS0FBSyxLQUFLUixLQUFMLENBQVdTLE1BQVgsR0FBb0IsQ0FBekIsQ0FBYjtBQUNBLGdCQUFJQyxNQUFNRixJQUFWO0FBQ0EsaUJBQUssSUFBSUcsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUtYLEtBQUwsQ0FBV1MsTUFBL0IsRUFBdUNFLEdBQXZDLEVBQ0E7QUFDSSxvQkFBSU4sV0FBV0ssR0FBZixFQUNBO0FBQ0ksMEJBQU1FLFFBQVEzQixNQUFNNEIsS0FBTixDQUFZLElBQUksQ0FBQ0gsTUFBTUwsT0FBUCxJQUFrQkcsSUFBbEMsRUFBd0MsS0FBS1IsS0FBTCxDQUFXVyxJQUFJLENBQWYsQ0FBeEMsRUFBMkQsS0FBS1gsS0FBTCxDQUFXVyxDQUFYLENBQTNELENBQWQ7QUFDQSx3QkFBSSxLQUFLYixJQUFULEVBQ0E7QUFDSSw2QkFBSyxJQUFJTixNQUFULElBQW1CLEtBQUtNLElBQXhCLEVBQ0E7QUFDSU4sbUNBQU9GLElBQVAsR0FBY3NCLEtBQWQ7QUFDSDtBQUNKLHFCQU5ELE1BUUE7QUFDSSw2QkFBS3BCLE1BQUwsQ0FBWUYsSUFBWixHQUFtQnNCLEtBQW5CO0FBQ0g7QUFDRDtBQUNIO0FBQ0RGLHVCQUFPRixJQUFQO0FBQ0g7QUFDSixTQXhCRCxNQTBCQTtBQUNJLGtCQUFNSSxRQUFRM0IsTUFBTTRCLEtBQU4sQ0FBWVIsT0FBWixFQUFxQixLQUFLSixLQUExQixFQUFpQyxLQUFLQyxFQUF0QyxDQUFkO0FBQ0EsZ0JBQUksS0FBS0osSUFBVCxFQUNBO0FBQ0kscUJBQUssSUFBSU4sTUFBVCxJQUFtQixLQUFLTSxJQUF4QixFQUNBO0FBQ0lOLDJCQUFPRixJQUFQLEdBQWNzQixLQUFkO0FBQ0g7QUFDSixhQU5ELE1BUUE7QUFDSSxxQkFBS3BCLE1BQUwsQ0FBWUYsSUFBWixHQUFtQnNCLEtBQW5CO0FBQ0g7QUFDSjtBQUNKOztBQUVERSxjQUNBO0FBQ0ksWUFBSSxLQUFLZCxLQUFULEVBQ0E7QUFDSSxrQkFBTUEsUUFBUSxFQUFkO0FBQ0EsaUJBQUssSUFBSVcsSUFBSSxLQUFLWCxLQUFMLENBQVdTLE1BQVgsR0FBb0IsQ0FBakMsRUFBb0NFLEtBQUssQ0FBekMsRUFBNENBLEdBQTVDLEVBQ0E7QUFDSVgsc0JBQU1lLElBQU4sQ0FBVyxLQUFLZixLQUFMLENBQVdXLENBQVgsQ0FBWDtBQUNIO0FBQ0QsaUJBQUtYLEtBQUwsR0FBYUEsS0FBYjtBQUNILFNBUkQsTUFVQTtBQUNJLGtCQUFNZ0IsT0FBTyxLQUFLZCxFQUFsQjtBQUNBLGlCQUFLQSxFQUFMLEdBQVUsS0FBS0QsS0FBZjtBQUNBLGlCQUFLQSxLQUFMLEdBQWFlLElBQWI7QUFDSDtBQUNKO0FBOUdMLENBREEiLCJmaWxlIjoidGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENvbG9yID0gcmVxdWlyZSgneXktY29sb3InKVxuY29uc3Qgd2FpdCA9IHJlcXVpcmUoJy4vd2FpdCcpXG5cbi8qKiBjaGFuZ2VzIHRoZSB0aW50IG9mIGFuIG9iamVjdCAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyB0aW50IGV4dGVuZHMgd2FpdFxue1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fFBJWEkuRGlzcGxheU9iamVjdFtdfSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge251bWJlcnxudW1iZXJbXX0gdGludFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZHVyYXRpb25dIGluIG1pbGxpc2Vjb25kc1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gQHNlZSB7QGxpbmsgV2FpdH1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvYmplY3QsIHRpbnQsIGR1cmF0aW9uLCBvcHRpb25zKVxuICAgIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICAgICAgc3VwZXIob2JqZWN0LCBvcHRpb25zKVxuICAgICAgICB0aGlzLnR5cGUgPSAnVGludCdcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5saXN0ID0gb2JqZWN0XG4gICAgICAgICAgICB0aGlzLm9iamVjdCA9IHRoaXMubGlzdFswXVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvblxuICAgICAgICBpZiAob3B0aW9ucy5sb2FkKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmxvYWQob3B0aW9ucy5sb2FkKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGludCkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudGludHMgPSBbdGhpcy5vYmplY3QudGludCwgLi4udGludF1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm9iamVjdC50aW50XG4gICAgICAgICAgICB0aGlzLnRvID0gdGludFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2F2ZSgpXG4gICAge1xuICAgICAgICBjb25zdCBzYXZlID0gc3VwZXIuc2F2ZSgpXG4gICAgICAgIHNhdmUuc3RhcnQgPSB0aGlzLnN0YXJ0XG4gICAgICAgIHNhdmUudG8gPSB0aGlzLnRvXG4gICAgICAgIHJldHVybiBzYXZlXG4gICAgfVxuXG4gICAgbG9hZChsb2FkKVxuICAgIHtcbiAgICAgICAgc3VwZXIubG9hZChsb2FkKVxuICAgICAgICB0aGlzLnN0YXJ0ID0gbG9hZC5zdGFydFxuICAgICAgICB0aGlzLnRvID0gbG9hZC50b1xuICAgIH1cblxuICAgIGNhbGN1bGF0ZSgpXG4gICAge1xuICAgICAgICBjb25zdCBwZXJjZW50ID0gdGhpcy5vcHRpb25zLmVhc2UodGhpcy50aW1lLCAwLCAxLCB0aGlzLmR1cmF0aW9uKVxuICAgICAgICBpZiAodGhpcy50aW50cylcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZWFjaCA9IDEgLyAodGhpcy50aW50cy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgbGV0IHBlciA9IGVhY2hcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy50aW50cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAocGVyY2VudCA8PSBwZXIpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IENvbG9yLmJsZW5kKDEgLSAocGVyIC0gcGVyY2VudCkgLyBlYWNoLCB0aGlzLnRpbnRzW2kgLSAxXSwgdGhpcy50aW50c1tpXSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGlzdClcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgb2JqZWN0IG9mIHRoaXMubGlzdClcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QudGludCA9IGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC50aW50ID0gY29sb3JcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGVyICs9IGVhY2hcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gQ29sb3IuYmxlbmQocGVyY2VudCwgdGhpcy5zdGFydCwgdGhpcy50bylcbiAgICAgICAgICAgIGlmICh0aGlzLmxpc3QpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgb2JqZWN0IG9mIHRoaXMubGlzdClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC50aW50ID0gY29sb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5vYmplY3QudGludCA9IGNvbG9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXZlcnNlKClcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLnRpbnRzKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB0aW50cyA9IFtdXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy50aW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aW50cy5wdXNoKHRoaXMudGludHNbaV0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRpbnRzID0gdGludHNcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHN3YXAgPSB0aGlzLnRvXG4gICAgICAgICAgICB0aGlzLnRvID0gdGhpcy5zdGFydFxuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHN3YXBcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=